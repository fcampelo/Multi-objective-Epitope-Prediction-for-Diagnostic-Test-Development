ret.as.list = TRUE)
if (j == 1){
rocs <- data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr)
} else {
rocs <- rbind(rocs,
data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr))
}
}
pvals <- pvals %>%
ungroup() %>%
dplyr::select(-METHOD1) %>%
dplyr::rename(Method = METHOD2) %>%
reshape2::melt(id.vars = c("Method", "NoLeak"),
variable.name = "Metric",
value.name = "pValue") %>%
dplyr::mutate(Method = gsub("_", "-", Method, fixed = TRUE),
pValue = round(pValue, 3))
df <- df %>%
dplyr::mutate(Method = as.character(Method),
Metric = as.character(Metric)) %>%
dplyr::left_join(pvals, by = c("Method", "NoLeak", "Metric")) %>%
dplyr::mutate(Method = factor(Method, levels = methods, ordered = TRUE),
Metric = factor(Metric, levels = metrics, ordered = TRUE),
pValue = pValue) %>%
group_by(Metric) %>%
mutate(Result = ifelse(Mean >= first(Mean), "better", "worse"))
df$Result[df$pValue > 0.05] <- "non-signif"
df$Result[df$Method == "RF-OrgSpec"] <- "ref. method"
df$Result <- factor(df$Result,
levels = c("ref. method", "non-signif", "better", "worse"),
ordered = TRUE)
df$pValue[df$pValue <= .01] <- paste0("<0.01")
df$pValue[df$pValue >= 0.9] <- paste0(">0.9")
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
plot.margin = margin(2, 2, 2, 0))
mp
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
# Run experiment (train models using organism-specific, heterogeneous and
# hybrid data sets, evaluate performance on hold-out set, calculate performance
# indices and generate individual plots)
OrgID    <- 1314      # Pathogen: S. pyogenes
rnd.seed <- 20210429
ncpus    <- 7
n.boot   <- 4999
# Load training and holdout data
epitopes        <- readRDS("../00_general_datasets/00_epitopes_20201006.rds")
data.train      <- readRDS("./data/splits/01_training.rds")
pred.train.sets <- readRDS("../../predictors_training_data/predictor_training_seqs.rds")
ho_prots        <- readRDS("./data/splits/prots_df.rds")
ho_peps         <- readRDS("./data/splits/02_holdout.rds")
invisible(sapply(dir("../00_general_scripts/",
pattern = ".R",
full.names = TRUE),
source))
# ============================================================================ #
# Train models and get hold-out predictions
# Training sets
Tr_specs <- data.frame(
TrData  = c("./data/splits/01_training.rds",
"./data/heterogeneous_data/df_heterogeneous.rds",
"./data/heterogeneous_data/df_hybrid.rds"),
out_dir = c("./output/TrOrgSpec",
"./output/TrHeter",
"./output/TrHybrid"))
# Results paths
myres_files <- data.frame(name = c("RF_OrgSpec", "RF_Hybrid", "RF_Heter"),
file = c("./output/TrOrgSpec/preds.rds",
"./output/TrHybrid/preds.rds",
"./output/TrHeter/preds.rds"))
preds_paths <- data.frame(name     = c("ABCpred", "Bepipred2", "iBCE-EL",
"LBtope", "SVMtrip"),
path     = c("./output/ABCpred/",
"./output/Bepipred2/",
"./output/iBCE-EL/",
"./output/lbtope/",
"./output/SVMtrip/"),
read.fun = c("read_abcpred", "read_bepipred2",
"read_ibceel", "read_lbtope",
"read_svmtrip"))
run_analysis(rnd.seed, epitopes, data.train, pred.train.sets,
ho_prots, ho_peps, myres_files, preds_paths, ncpus,
n.boot)
library(dplyr)
library(ggplot2)
library(reshape2)
# Load results data
mydata <- readRDS("./output/analysis.rds")
# Method and performance metric labels (ordered, for plotting)
methods <- c("ABCpred", "Bepipred2", "iBCE-EL", "LBtope", "SVMtrip",
"RF-Heter","RF-Hybrid","RF-OrgSpec")
metrics <- c("ACCURACY", "SENS", "PPV", "NPV", "AUC", "MCC")
preds <- list(1)
# Extract predictions data
preds$mypreds <- mydata$mypreds
preds$myprobs <- mydata$myprobs
# Extract performance data
df <- mydata$myperf_pep %>%
dplyr::filter(!(Metric %in% c("SPEC", "F1"))) # <-- not needed for the paper
# Extract p-values
pvals <- mydata$Pvals_pep %>%
dplyr::select(-SPEC)
# Extract ROC curves
cl.cols <- grep("_class", names(mydata$myres_pep))
pr.cols <- grep("_prob", names(mydata$myres_pep))
for (j in seq_along(cl.cols)){
myperf <- epitopes::calc_performance(truth = mydata$myres_pep$Class,
pred = mydata$myres_pep[, cl.cols[j]],
prob = mydata$myres_pep[, pr.cols[j]],
ret.as.list = TRUE)
if (j == 1){
rocs <- data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr)
} else {
rocs <- rbind(rocs,
data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr))
}
}
pvals <- pvals %>%
ungroup() %>%
dplyr::select(-METHOD1) %>%
dplyr::rename(Method = METHOD2) %>%
reshape2::melt(id.vars = c("Method", "NoLeak"),
variable.name = "Metric",
value.name = "pValue") %>%
dplyr::mutate(Method = gsub("_", "-", Method, fixed = TRUE),
pValue = round(pValue, 3))
df <- df %>%
dplyr::mutate(Method = as.character(Method),
Metric = as.character(Metric)) %>%
dplyr::left_join(pvals, by = c("Method", "NoLeak", "Metric")) %>%
dplyr::mutate(Method = factor(Method, levels = methods, ordered = TRUE),
Metric = factor(Metric, levels = metrics, ordered = TRUE),
pValue = pValue) %>%
group_by(Metric) %>%
mutate(Result = ifelse(Mean >= first(Mean), "better", "worse"))
df$Result[df$pValue > 0.05] <- "non-signif"
df$Result[df$Method == "RF-OrgSpec"] <- "ref. method"
df$Result <- factor(df$Result,
levels = c("ref. method", "non-signif", "better", "worse"),
ordered = TRUE)
df$pValue[df$pValue <= .01] <- paste0("<0.01")
df$pValue[df$pValue >= 0.9] <- paste0(">0.9")
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
run_analysis(rnd.seed, epitopes, data.train, pred.train.sets,
ho_prots, ho_peps, myres_files, preds_paths, ncpus)
library(dplyr)
library(ggplot2)
library(reshape2)
# Load results data
mydata <- readRDS("./output/analysis.rds")
# Method and performance metric labels (ordered, for plotting)
methods <- c("ABCpred", "Bepipred2", "iBCE-EL", "LBtope", "SVMtrip",
"RF-Heter","RF-Hybrid","RF-OrgSpec")
metrics <- c("ACCURACY", "SENS", "PPV", "NPV", "AUC", "MCC")
preds <- list(1)
# Extract predictions data
preds$mypreds <- mydata$mypreds
preds$myprobs <- mydata$myprobs
# Extract performance data
df <- mydata$myperf_pep %>%
dplyr::filter(!(Metric %in% c("SPEC", "F1"))) # <-- not needed for the paper
# Extract p-values
pvals <- mydata$Pvals_pep %>%
dplyr::select(-SPEC)
# Extract ROC curves
cl.cols <- grep("_class", names(mydata$myres_pep))
pr.cols <- grep("_prob", names(mydata$myres_pep))
for (j in seq_along(cl.cols)){
myperf <- epitopes::calc_performance(truth = mydata$myres_pep$Class,
pred = mydata$myres_pep[, cl.cols[j]],
prob = mydata$myres_pep[, pr.cols[j]],
ret.as.list = TRUE)
if (j == 1){
rocs <- data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr)
} else {
rocs <- rbind(rocs,
data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr))
}
}
pvals <- pvals %>%
ungroup() %>%
dplyr::select(-METHOD1) %>%
dplyr::rename(Method = METHOD2) %>%
reshape2::melt(id.vars = c("Method", "NoLeak"),
variable.name = "Metric",
value.name = "pValue") %>%
dplyr::mutate(Method = gsub("_", "-", Method, fixed = TRUE),
pValue = round(pValue, 3))
df <- df %>%
dplyr::mutate(Method = as.character(Method),
Metric = as.character(Metric)) %>%
dplyr::left_join(pvals, by = c("Method", "NoLeak", "Metric")) %>%
dplyr::mutate(Method = factor(Method, levels = methods, ordered = TRUE),
Metric = factor(Metric, levels = metrics, ordered = TRUE),
pValue = pValue) %>%
group_by(Metric) %>%
mutate(Result = ifelse(Mean >= first(Mean), "better", "worse"))
df$Result[df$pValue > 0.05] <- "non-signif"
df$Result[df$Method == "RF-OrgSpec"] <- "ref. method"
df$Result <- factor(df$Result,
levels = c("ref. method", "non-signif", "better", "worse"),
ordered = TRUE)
df$pValue[df$pValue <= .01] <- paste0("<0.01")
df$pValue[df$pValue >= 0.9] <- paste0(">0.9")
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
# generate plot
library(dplyr)
library(ggplot2)
library(reshape2)
# Load results data
mydata <- readRDS("./output/analysis.rds")
# Method and performance metric labels (ordered, for plotting)
methods <- c("ABCpred", "Bepipred2", "iBCE-EL", "LBtope", "SVMtrip",
"RF-Heter","RF-Hybrid","RF-OrgSpec")
metrics <- c("ACCURACY", "SENS", "PPV", "NPV", "AUC", "MCC")
preds <- list(1)
# Extract predictions data
preds$mypreds <- mydata$mypreds
preds$myprobs <- mydata$myprobs
# Extract performance data
df <- mydata$myperf_pep %>%
dplyr::filter(!(Metric %in% c("SPEC", "F1"))) # <-- not needed for the paper
# Extract p-values
pvals <- mydata$Pvals_pep %>%
dplyr::select(-SPEC)
# Extract ROC curves
cl.cols <- grep("_class", names(mydata$myres_pep))
pr.cols <- grep("_prob", names(mydata$myres_pep))
for (j in seq_along(cl.cols)){
myperf <- epitopes::calc_performance(truth = mydata$myres_pep$Class,
pred = mydata$myres_pep[, cl.cols[j]],
prob = mydata$myres_pep[, pr.cols[j]],
ret.as.list = TRUE)
if (j == 1){
rocs <- data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr)
} else {
rocs <- rbind(rocs,
data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr))
}
}
pvals <- pvals %>%
ungroup() %>%
dplyr::select(-METHOD1) %>%
dplyr::rename(Method = METHOD2) %>%
reshape2::melt(id.vars = c("Method", "NoLeak"),
variable.name = "Metric",
value.name = "pValue") %>%
dplyr::mutate(Method = gsub("_", "-", Method, fixed = TRUE),
pValue = round(pValue, 3))
df <- df %>%
dplyr::mutate(Method = as.character(Method),
Metric = as.character(Metric)) %>%
dplyr::left_join(pvals, by = c("Method", "NoLeak", "Metric")) %>%
dplyr::mutate(Method = factor(Method, levels = methods, ordered = TRUE),
Metric = factor(Metric, levels = metrics, ordered = TRUE),
pValue = pValue) %>%
group_by(Metric) %>%
mutate(Result = ifelse(Mean >= first(Mean), "better", "worse"))
df$Result[df$pValue > 0.05] <- "non-signif"
df$Result[df$Method == "RF-OrgSpec"] <- "ref. method"
df$Result <- factor(df$Result,
levels = c("ref. method", "non-signif", "better", "worse"),
ordered = TRUE)
df$pValue[df$pValue <= .005] <- paste0("<0.005")
df$pValue[df$pValue >= 0.9] <- paste0(">0.9")
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
# generate plot
library(dplyr)
library(ggplot2)
library(reshape2)
# Load results data
mydata <- readRDS("./output/analysis.rds")
# Method and performance metric labels (ordered, for plotting)
methods <- c("ABCpred", "Bepipred2", "iBCE-EL", "LBtope", "SVMtrip",
"RF-Heter","RF-Hybrid","RF-OrgSpec")
metrics <- c("ACCURACY", "SENS", "PPV", "NPV", "AUC", "MCC")
preds <- list(1)
# Extract predictions data
preds$mypreds <- mydata$mypreds
preds$myprobs <- mydata$myprobs
# Extract performance data
df <- mydata$myperf_pep %>%
dplyr::filter(!(Metric %in% c("SPEC", "F1"))) # <-- not needed for the paper
# Extract p-values
pvals <- mydata$Pvals_pep %>%
dplyr::select(-SPEC)
# Extract ROC curves
cl.cols <- grep("_class", names(mydata$myres_pep))
pr.cols <- grep("_prob", names(mydata$myres_pep))
for (j in seq_along(cl.cols)){
myperf <- epitopes::calc_performance(truth = mydata$myres_pep$Class,
pred = mydata$myres_pep[, cl.cols[j]],
prob = mydata$myres_pep[, pr.cols[j]],
ret.as.list = TRUE)
if (j == 1){
rocs <- data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr)
} else {
rocs <- rbind(rocs,
data.frame(Method = gsub("_class", "",
names(mydata$myres_pep)[cl.cols[j]]),
TPR    = myperf$tpr,
FPR    = myperf$fpr))
}
}
pvals <- pvals %>%
ungroup() %>%
dplyr::select(-METHOD1) %>%
dplyr::rename(Method = METHOD2) %>%
reshape2::melt(id.vars = c("Method", "NoLeak"),
variable.name = "Metric",
value.name = "pValue") %>%
dplyr::mutate(Method = gsub("_", "-", Method, fixed = TRUE),
pValue = round(pValue, 3))
df <- df %>%
dplyr::mutate(Method = as.character(Method),
Metric = as.character(Metric)) %>%
dplyr::left_join(pvals, by = c("Method", "NoLeak", "Metric")) %>%
dplyr::mutate(Method = factor(Method, levels = methods, ordered = TRUE),
Metric = factor(Metric, levels = metrics, ordered = TRUE),
pValue = pValue) %>%
group_by(Metric) %>%
mutate(Result = ifelse(Mean >= first(Mean), "better", "worse"))
df$Result[df$pValue > 0.05] <- "non-signif"
df$Result[df$Method == "RF-OrgSpec"] <- "ref. method"
df$Result <- factor(df$Result,
levels = c("ref. method", "non-signif", "better", "worse"),
ordered = TRUE)
df$pValue[df$pValue <= .01] <- paste0("<0.01")
df$pValue[df$pValue >= 0.9] <- paste0(">0.9")
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
# Generate the plot
mp <- ggplot(filter(df, NoLeak == FALSE),
aes(x = Method, y = Value,
ymin = Value - StdErr, ymax = Value + StdErr,
colour  = Result)) +
geom_text(aes(label = pValue), size = 2, col = "#222222", nudge_x = -0.4) +
geom_pointrange(fatten = 1.5, size = .75, show.legend = FALSE) +
scale_color_manual(values = c("#555555", "#7570c3", "#1b9e77", "#d95f02")) +
ylab("Estimated performance") + xlab("") +
facet_wrap(. ~ Metric, scales = "free", nrow = 2) +
geom_vline(xintercept = 5.35, size = .2, lty = 2) +
scale_y_continuous(expand = c(.055,.05), breaks = seq(-1, 1, by = 0.1)) +
scale_x_discrete(expand = c(.1,.05)) +
coord_flip() + theme_light() +
theme(strip.text  = element_text(colour = "black", face = "bold"),
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7))
mp
ggsave(plot = mp, filename = "../figures/res_Spyogenes.png",
width = 7.5, height = 4.8, units = "in")
ggsave(plot = mp, filename = "../../figures/res_Spyogenes.png",
width = 7.5, height = 4.8, units = "in")
ggsave(plot = mp, filename = "../../figures/res_Spyogenes.tiff",
width = 7.5, height = 4.8, units = "in")
setwd("~/Github/OrgSpec-paper/Experiments/01_EBV")
OrgID    <- 10376      # Pathogen: Epstein-Barr Virus
rnd.seed <- 20210107
ncpus    <- 7
# Load training and holdout data
epitopes        <- readRDS("../00_general_datasets/00_epitopes_20201006.rds")
data.train      <- readRDS("./data/splits/01_training.rds")
pred.train.sets <- readRDS("../../predictors_training_data/predictor_training_seqs.rds")
ho_prots        <- readRDS("./data/splits/prots_df.rds")
ho_peps         <- readRDS("./data/splits/02_holdout.rds")
invisible(lapply(dir("../00_general_scripts/",
pattern = ".R",
full.names = TRUE),
source))
# ============================================================================ #
# Train models and get hold-out predictions
# Training sets
Tr_specs <- data.frame(
TrData  = c("./data/splits/01_training.rds",
"./data/heterogeneous_data/df_heterogeneous.rds",
"./data/heterogeneous_data/df_hybrid.rds"),
out_dir = c("./output/TrOrgSpec",
"./output/TrHeter",
"./output/TrHybrid"))
