qnorm(p=5, mean=115.1, sd=20.5)
qnorm(p=0.05, mean=115.1, sd=20.5)
qnorm(p=0.05, mean=125.5, sd=20.5)
qnorm(p=0.05)
qnorm(p=0.05, lower.tail=TRUE)
qnorm(p=0.05, lower.tail=FALSE)
qnorm(p=0.025, lower.tail=FALSE)
qnorm(p=0.025, lower.tail=TRUE)
version
getOption("repos")
chooseCRANmirror()
getOption("repos")
unlink('C:/Users/Joseph/_Aston/DataMining/Assignment/CS4850_RomanCerny_cache', recursive = TRUE)
install.packages("xfun")
install.packages("yuml")
install.packages("yaml")
getOption("repos")
chooseCRANmirror()
chooseCRANmirror()
getOption("repos")
install.packages("knitr")
install.packages("xfun")
install.packages("xfun")
update.packages("xfun")
install.packages("xfun")
getOption("repos")
getOption("repos")
help("Rprofile")
getOption("repos")
options(repos=structure(c(CRAN="https://mran.revolutionanalytics.com/snapshot/2017-01-01/")))
getOption("repos")
getOption("repos")
getOption("repos")
getOption("repos")
getOption("repos")
getOption("repos")
getOption("repos")
install.packages("xfun")
install.packages("C:/Users/Joseph/Downloads/xfun_0.21.zip", repos = NULL, type = "win.binary")
install.packages("xelatex")
install.packages("tinytex")
tinytex::install_prebuilt()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_prebuilt()
tinytex::uninstall_tinytex
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
sin(5)
-sin(5)
cos(7)
cos(7)*7
(6*7*0.9589243) - (cos(7)*7)
6*7*0.9589243-cos(7)*7
6*0.9589243*(7-1)-108*cos(7)
-10*(6*7*0.9589243 - 108*cos(7))
108*(-cos(-2))
-cos(7)
-cos(-2)
0.4161468*108
42*0.9589243+(-0.7539023)*108
(42*0.9589243)+((-0.7539023)*108)
(-10)*(-41.14663)
(-6)*0.9589243 +4*(-41.14663)
1-0.01*(-170.3401)* 1
-1-0.01*411.4663*(-1)
1-0.01*44.94385* 1
5*5*11+1
(320 * 240 * 3) * (320 * 240 * 11) + 1
20*(-0.2)+17*0.3+17*0.2+18*0.3
17*(-0.2)+15*0.3+18*0.2+12*0.3
15*(-0.2)+11*0.3+12*0.2+19*0.3
11*(-0.2)+18*0.3+19*0.2+20*0.3
17*(-0.2)+18*0.3+17*0.2+17*0.3
18*(-0.2)+12*0.3+17*0.2+17*0.3
12*(-0.2)+19*0.3+17*0.2+19*0.3
19*(-0.2)+20*0.3+19*0.2+18*0.3
17*(-0.2)+17*0.3+14*0.2+12*0.3
17*(-0.2)+17*0.3+12*0.2+16*0.3
17*(-0.2)+19*0.3+16*0.2+20*0.3
19*(-0.2)+18*0.3+20*0.2+14*0.3
14*(-0.2)+12*0.3+13*0.2+10*0.3
12*(-0.2)+16*0.3+10*0.2+17*0.3
16*(-0.2)+20*0.3+17*0.2+15*0.3
20*(-0.2)+14*0.3+15*0.2+15*0.3
-0.2*10.5+0*12.4+(-0.2)*9.5+(-0.1)*11.5
0*10.5+0*12.4+(-0.2)*9.5+(-0.2)*11.5
0.1*10.5+0*12.4+(-0.1)*9.5+(-0.2)*11.5
(1 - 0.001)((-0.2)*0.4 +(-0.9))+ 0.001* ( 50 + 0.9* ((-0.2)*0.9 +(-0.9)))
(1 - 0.001)*((-0.2)*0.4 +(-0.9))+ 0.001* ( 50 + 0.9* ((-0.2)*0.9 +(-0.9)))
setwd("C:/Users/Joseph/_Aston/Dissertation/Multi-objective-Epitope-Prediction-for-Diagnostic-Test-Development")
require("dplyr")
require("emoa")
require("mco")
require("ggplot2")
require("rPref")
#file_name <- paste('./data/predictions_smith_waterman_PAM30_2021-06-08_14_22_03.csv', sep="")
file_name <- paste('./data/predictions_smith_waterman_BLOSUM45_2021-06-08_15_57_07.csv', sep="")
df <- read.csv(file = file_name)
hist(df$pair_align_score)
df_objectives <- df %>%
mutate(probability_inv = 1 - Probability,
distance_neg = -pair_align_score) %>%
select(probability_inv, distance_neg) #%>% head()
# First pareto front
####################
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
plot(m_objectives_t$probability_inv, m_objectives_t$distance_neg,
xlim = c(min(df_objectives$probability_inv), max(df_objectives$probability_inv)),
ylim = c(min(df_objectives$distance_neg), max(df_objectives$distance_neg)))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", lty=1)
# Additional pareto fronts
##########################
for (i in 1:20) {
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
df_objectives <- df_objectives %>%
anti_join(as.data.frame(t(nondominated)), by="probability_inv")#, distance_neg")
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
color <- "green"
if (i %% 2) {color <- "blue"}
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, lty=1)
}
for (i in 1:20) {
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
df_objectives <- df_objectives %>%
anti_join(as.data.frame(t(nondominated)), by="probability_inv")#, distance_neg")
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
color <- "green"
if (!i %% 2) {color <- "blue"}
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, lty=1)
}
require("dplyr")
require("emoa")
require("mco")
require("ggplot2")
require("rPref")
#file_name <- paste('./data/predictions_smith_waterman_PAM30_2021-06-08_14_22_03.csv', sep="")
file_name <- paste('./data/predictions_smith_waterman_BLOSUM45_2021-06-08_15_57_07.csv', sep="")
df <- read.csv(file = file_name)
hist(df$pair_align_score)
df_objectives <- df %>%
mutate(probability_inv = 1 - Probability,
distance_neg = -pair_align_score) %>%
select(probability_inv, distance_neg) #%>% head()
# First pareto front
####################
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
plot(m_objectives_t$probability_inv, m_objectives_t$distance_neg,
xlim = c(min(df_objectives$probability_inv), max(df_objectives$probability_inv)),
ylim = c(min(df_objectives$distance_neg), max(df_objectives$distance_neg)))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", lty=1)
# Additional pareto fronts
##########################
for (i in 1:20) {
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
df_objectives <- df_objectives %>%
anti_join(as.data.frame(t(nondominated)), by="probability_inv")#, distance_neg")
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
color <- "green"
if (!i %% 2) {color <- "blue"}
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, lty=1)
}
require("dplyr")
require("emoa")
require("mco")
require("ggplot2")
require("rPref")
file_name <- paste('./data/predictions_smith_waterman_PAM30_2021-06-08_14_22_03.csv', sep="")
#file_name <- paste('./data/predictions_smith_waterman_BLOSUM45_2021-06-08_15_57_07.csv', sep="")
df <- read.csv(file = file_name)
hist(df$pair_align_score)
df_objectives <- df %>%
mutate(probability_inv = 1 - Probability,
distance_neg = -pair_align_score) %>%
select(probability_inv, distance_neg) #%>% head()
# First pareto front
####################
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
plot(m_objectives_t$probability_inv, m_objectives_t$distance_neg,
xlim = c(min(df_objectives$probability_inv), max(df_objectives$probability_inv)),
ylim = c(min(df_objectives$distance_neg), max(df_objectives$distance_neg)))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", lty=1)
# Additional pareto fronts
##########################
for (i in 1:20) {
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
df_objectives <- df_objectives %>%
anti_join(as.data.frame(t(nondominated)), by="probability_inv")#, distance_neg")
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
color <- "green"
if (!i %% 2) {color <- "blue"}
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, lty=1)
}
require("dplyr")
require("emoa")
require("mco")
require("ggplot2")
require("rPref")
file_name <- paste('./data/predictions_smith_waterman_PAM30_2021-06-08_14_22_03.csv', sep="")
#file_name <- paste('./data/predictions_smith_waterman_BLOSUM45_2021-06-08_15_57_07.csv', sep="")
df <- read.csv(file = file_name)
hist(df$pair_align_score)
df_objectives <- df %>%
mutate(probability_inv = 1 - Probability,
distance_neg = -pair_align_score) %>%
select(probability_inv, distance_neg) #%>% head()
# First pareto front
####################
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
plot(m_objectives_t$probability_inv, m_objectives_t$distance_neg,
xlim = c(min(df_objectives$probability_inv), max(df_objectives$probability_inv)),
ylim = c(min(df_objectives$distance_neg), max(df_objectives$distance_neg)))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col="blue", lty=1)
# Additional pareto fronts
##########################
for (i in 1:20) {
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
df_objectives <- df_objectives %>%
anti_join(as.data.frame(t(nondominated)), by="probability_inv")#, distance_neg")
m_objectives <- t(as.matrix(df_objectives))
nondominated <- nondominated_points(m_objectives)
rank <- nds_rank(nondominated) #, partial)
dim(m_objectives)
dim(nondominated)
dim(rank)
nondominated
rank
color <- "green"
if (!i %% 2) {color <- "blue"}
# plots Pareto fronts
m_objectives_t <- as.data.frame(t(nondominated))
points(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, pch="o")
lines(m_objectives_t$probability_inv, m_objectives_t$distance_neg, col=color, lty=1)
}
